DockerFile
- membuat docker image dilakukan dengan instruksi yang ada di dalam DockerFile
- semua instruksi untuk menjalankan aplikasi kita
- dieksekusi untuk membuat Docker Image
- membuat image : docker build 
- diberi "-t" untuk namanya, paling akhir adalah directory hasil buildnya
	docker build -t faiz/app:1.0.0 folder-dockerfile
	docker build -t faiz/app:1.0.0 -t faiz/app:latest folder-dockerfile

DockerFile format
- dengan nama Dockerfile, tidak ada extension
- instuksi format / syntax
# komentar
INSTRUCTION arguments 
INSTRUCTION: perintah yang digunakan dalam Dockerfile, menggunakan uppercase, case insensitive
arguments: data argument/parameter untuk INSTRUCTION 

FROM instruction
- build stage dari image yang ditentukan (awal dari tahapan pembuatan image)
- biasanya menggunakan image dari docker image lain yg sudah ada
	FROM image:version
	FROM alpine:3
- contoh : 
	docker build -t whitecat20/from from

RUN instruction
- instruksi untuk mengeksekusi perintah didalam image pada saat build stage
- hasil perintah RUN akan di commit dalam perubahan image, dieksekusi saat build saja
- ketika menjadi docker image tidak akan dijalankan
- format instruksi : 
	RUN command
	RUN ["executable", "argument", ...]
- contoh : 
	RUN mkdir hello // membuat folder
	RUN echo "Hello World" > "hello/world.txt" // print hw, masukan kedalam file tsb
	RUN cat "hello/world.txt" // tampilkan apa yang di dalam file tsb'
	--
	docker build -t whitecat20/run run
- untuk menampilkan output detail dari Dockerfile, bisa menggunakan --progeress=plain
- untuk build tanpa cache, bisa menggunakan --no-cache
	docker build -t whitecat20/run run --progress=plain --no-cache

CMD instruction
- instruksi yang digunakan ketika docker container berjalan
- tidak akan dijalankan pada proses build, namun dijalankan ketika docker container berjalan
- hanya satu saja instruksi CMD di dalam Dockerfile, jika lebih dr satu, maka yang dieksekusi yg paling akhir
- format : 
	CMD command param param
	CMD ["executable", "param", "param"]
	CMD ["param", "param"] -> menggunakan executable entry point
- contoh : 
	FROM alpine:3
	RUN mkdir hello
	RUN echo "hello world" > "hello/hello.txt"
	CMD cat "hello/hello.txt"
	--
	docker build -t whitecat20/command command
	docker image inspect whitecat20/command
	docker container create --name command whitecat20/command
	docker container start command
	docker container logs command
	
LABEL instruction : 
- menambahkan meta data pada docker image
- format : 
	LABEL key=value
	LABEL key1=value1 key2=value2
- contoh : 
	LABEL author="Muhammad Faiz Rahmadani"
	LABEL company="OMNI IT Consulting" website="whitecat20.github.io"
	--
	docker build -t whitecat20/label label
	docker image inspect whitecat20/label
	
ADD instruction : 
- menambahkan file ke dalam docker image
- apabila terdeteksi file yang di add adalah file kompress, maka otomatis akan di ekstrak
- bisa menambahkan beberapa file sekaligus dengan pattern di golang
- format : 
	add source destination
- contoh : 
	ADD helloworld.txt hello // tambahkan helloworld.txt ke folder hello
	ADD *.txt hello // menambah semua file .txt ke folder hello
	--
	docker container create --name add whitecat20/add
	docker container start add
	docker container logs add
	
COPY instruction : 
- sama seperti ADD, hanya saja ADD bisa mendownload source dr URL
- copy tidak bisa, hanya memindah
	COPY text/ hello // tambahkan helloworld.txt ke folder hello
	COPY *.txt hello // menambah semua file .txt ke folder hello
	-- 
	docker build -t whitecat20/copy copy
	docker container create --name copy whitecat20/copy
	docker container start copy
	docker container logs copy
	
Dockerignore file : 
- ketika menjalankan ADD dan COPY, yang pertama kali dibaca oleh docker adalah file .dockerignore
- bersifat seperti .gitignore
- contoh : 
	text/*.log
	text/temp
	--
	FROM alpine:3
	RUN mkdir hello
	COPY text/* hello
	CMD ls -l hello
	--
	docker build -t whitecat20/ignore ignore
	docker container create --name ignore whitecat20/ignore
	docker container start ignore
	docker container logs ignore	

EXPOSE instruction : 
- instruksi agar container listen ke port (nomor dan protokol) tertentu
- sebagai informasi saja, tidak mempublish port apapun
- format : 
	EXPOSE port // default menggunakan TCP
	EXPOSE port/tcp
	EXPOSE port/udp
	
- contoh : 
	FROM golang:18-alpine
	RUN mkdir app
	COPY main.go app
	EXPOSE 8080
	CMD go run app/main.go
	-- 
	docker build -t whitecat20/expose expose
	docker image inspect whitecat20/expose // untuk cek apakah beneran di expose atau tidak
	docker container create --name expose --publish 8080:8080 whitecat20/expose
	docker container start expose
	docker container logs expose

ENV instruction : 
- instruksi agar image hasil build bisa menyimpan env
- sifat dari ENV didalam Dockerfile adalah default, jadi bisa diganti lewat pembuatan container
- format : 
	ENV key=value
	ENV key1=value1 key2=value2
- contoh : 
	FROM golang:1.18-alpine
	ENV APP_PORT=8080
	RUN mkdir app
	COPY main.go app
	EXPOSE ${APP_PORT}
	CMD go run app/main.go
	-- 
	docker build -t whitecat20/env env
	docker image inspect whitecat20/env // untuk cek apakah beneran di expose atau tidak
	docker container create --name env --env APP_PORT=9090 --publish 9090:9090 whitecat20/env
	docker container start env
	docker container logs env

	
