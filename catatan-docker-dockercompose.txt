Docker compose : dapat menjalankan multiple docker container sekaligus
- tidak perlu mengetikan perintah docker create secara manual, dan menjalankannya.
- menggunakan file YAML (macam json) untuk melakukan konfigurasi beberapa docker container
- Digunakan untuk membuat development environment
- digunakan untuk automation testing
- digunakan juga untuk deployment

Membuat docker container : 
- menggunakan keyword "services"
contoh : 
	services:
	  nginx-example : 
		container_name: nginx-example
		image: nginx:latest
- untuk membuat container dari konfigurasi file, menggunakan perintah
	docker compose create
(sebelum dijalankan, jangan lupa create dulu!)
Menjalankan Container : 
- menggunakan perintah docker compose start

Melihat Container : 
- menampilkan docker container yang berada di konfigurasi docker compose, selain compose tidak akan terlihat
- perintahnya : docker compose ps

Menghentikan container : 
- docker compose stop

Menghapus container : 
- menggunakan perintah : docker compose down
- semua container, network, volume, yang digunakan oleh container tersebut akan dihapus


Project Name : 
- secara default, nama project akan mengikuti nama folder dari file docker compose tsb.
- untuk cek project apa saja yang berjalan : docker compose ls

Service : 
- service = container, tiap docker compose bisa memuat banyak container dari image2

Port : 
- bisa mengekspos ports, menggunakan port forwarding
- attribute ports berisi object port
- short syntax : port host:container misal -> 8080:80, 8080 di host untuk di fwd ke port 80 di container
- long syntax berisi : 
	- target : port di di dalam container
	- published : port yang digunakan di host
	- protocol : protocol port (TCP/UDP)
	- mode : host (untuk port di tiap node), ingress (untuk swarm mode) 

- contoh =  
	services:
	  nginx-port1:
		image: nginx:latest
		container_name: nginx-port1
		ports:
		  - protocol : tcp
			published : 8080
			target: 80
	  
	  nginx-port2 : 
		image: nginx:latest
		container_name: nginx-port2
		ports:
		  - "8081:80"

Environment : 
- menambahkan env di container, dengan attribute environment
- contoh = 
	services : 
	  mongodb-example :
		image : mongo:latest
		container_name: mongodb-example
		ports : 
		  - "27017:27017"
		environment :
		  - MONGO_INITDB_ROOT_USERNAME=root
		  - MONGO_INITDB_ROOT_PASSWORD=root
		  - MONGO_INITDB_DATABASE=admin

Bind mount : 
- dapat menggunakan attribute volume di services
- dapat menambahkan satu atau lebih bind mount jika mau
- short syntax dan long syntax
short syntax = source:target:mode, 
- source adalah lokasi di host, 
- target adalah lokasi di container
- mode, mode bind mount, ro untuk readonly, rw read and write (default)
- source bisa menggunakan relative path dengan titik .
- contoh : 
	services : 
	  mongodb1 :
		image : mongo:latest
		container_name: mongodb1
		ports : 
		  - "27017:27017"
		environment :
		  - MONGO_INITDB_ROOT_USERNAME=root
		  - MONGO_INITDB_ROOT_PASSWORD=root
		  - MONGO_INITDB_DATABASE=admin
		volumes : 
		  - "./data-mongo1:/data/db"
	
long syntax = bisa dibuat dalam bentuk nested object volume dengan attribute
contoh : 
  mongodb2 :
    image : mongo:latest
    container_name: mongodb2
    ports : 
      - "27018:27017"
    environment :
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=admin
    volumes : 
      - type: bind
        source : "./data-mongo2"
        target : "/data/db"
        read_only : false

	